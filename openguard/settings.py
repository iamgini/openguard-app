"""
Django settings for openguard project.

Generated by 'django-admin startproject' using Django 4.0.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""

from pathlib import Path
import os
import logging

import json
import logging.config


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
#SECRET_KEY = 'django-insecure-ibc2wkz@&a)k8-kbs74azoa5zxwd2!e4@$13f7&gv3g3rhz5rn'
SECRET_KEY = os.getenv('DJANGO_SECRET_KEY')
#SECRET_KEY = os.environ.get("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
#DEBUG = True
#DEBUG = True # int(os.environ.get("DEBUG", default=0))
DEBUG = os.getenv('DEBUG', False)
LOGLEVEL = os.getenv('DJANGO_LOGLEVEL', 'info').upper()

# 'DJANGO_ALLOWED_HOSTS' should be a single string of hosts with a space between each.
# For example: 'DJANGO_ALLOWED_HOSTS=localhost 127.0.0.1 [::1]'
#ALLOWED_HOSTS = []
#ALLOWED_HOSTS = os.environ.get("DJANGO_ALLOWED_HOSTS").split(" ")
#ALLOWED_HOSTS = ['0.0.0.0','localhost','127.0.0.1','[::1]','192.168.56.1']
#ALLOWED_HOSTS = ['0.0.0.0','localhost','127.0.0.1','[::1]','192.168.56.1']
ALLOWED_HOSTS = os.getenv('DJANGO_ALLOWED_HOSTS', '127.0.0.1').split(',')


# Application definition

## Gineesh: 1. added 'app.apps.AppConfig',
## Gineesh: 2. added 'api.apps.ApiConfig',
## Gineesh: 3. added 'rest_framework',
## Gineesh: 4. added 'corsheaders',
## Gineesh: 5. added 'crispy_forms' - disabled
## Gineesh: 6. added 'django_crontab',

INSTALLED_APPS = [
    #'django_crontab',
    'api.apps.ApiConfig',
    'app.apps.AppConfig',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework.authtoken',
    'corsheaders',
    'crispy_forms',
    "crispy_bootstrap5",
    #"django_extensions",
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'openguard.urls'


TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR,'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'openguard.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

#DATABASES = {
#    'default': {
#        'ENGINE': 'django.db.backends.sqlite3',
#        'NAME': BASE_DIR / 'db.sqlite3',
#    }
#}

## Gineesh: postgresql database config
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        #'NAME': 'openguarddb',
        'NAME': os.getenv('DATABASE_NAME', 'demodb'),
        #'USER': 'postgresadmin',
        'USER': os.getenv('DATABASE_USERNAME', 'dbadmin'),
        #'PASSWORD': 'admin123',
        'PASSWORD': os.getenv('DATABASE_PASSWORD', 'password'),
        #'HOST': '192.168.64.10',
        'HOST': os.getenv('DATABASE_HOST', '127.0.0.1'),
        #'PORT': '32003',
        'PORT': os.getenv('DATABASE_PORT', 5432),
        #'HOST': 'localhost',
        #'PORT': '5432',
    }
}



# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/
# https://testdriven.io/blog/dockerizing-django-with-postgres-gunicorn-and-nginx/s
STATIC_URL = '/static/'
# STATIC_ROOT = BASE_DIR / "staticfiles"
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

## Gineesh
LOGIN_REDIRECT_URL = '/dashboard/'
LOGOUT_REDIRECT_URL = '/login/'

## Gineesh
LOGIN_URL = '/login/'

## Gineesh - bootstrap template
## skipped due to issues.
CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"

CRISPY_TEMPLATE_PACK = "bootstrap5"
#CRISPY_TEMPLATE_PACK = 'bootstrap4' # 'uni_form'
#'bootstrap'

## Gineesh cron jobs
CRONJOBS = [
    ('* * * * *', 'app.cron.my_cron_job')
]

## https://www.linuxtut.com/en/7716c6e46338768467eb/

#if DEBUG:
#    # will output to your console
#    logging.basicConfig(
#        level = logging.DEBUG,
#        format = '%(asctime)s %(levelname)s %(message)s',
#    )
#else:
#    # will output to logging file
#    logging.basicConfig(
#        level = logging.DEBUG,
#        format = '%(asctime)s %(levelname)s %(message)s',
#        filename = '/my_log_file.log',
#        filemode = 'a'
#    )

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.TokenAuthentication',
        #'rest_framework.authentication.BasicAuthentication',
        #'rest_framework.authentication.SessionAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
        #'rest_framework.permissions.AllowAny'
        )
}